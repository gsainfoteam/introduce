{"version":3,"sources":["Footer.js","listItems.js","DashBoard.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Typography","variant","color","align","Link","href","Date","getFullYear","firstListItems","ListItem","button","ListItemIcon","class","ListItemText","primary","secondListItems","ListSubheader","inset","style","fontSize","lineHeight","letterSpacing","textTransform","display","whiteSpace","direction","MozFontFeatureSettings","alignContent","thirdListItems","useStyles","makeStyles","theme","root","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","DashBoard","classes","React","useState","open","setOpen","fixedHeightPaper","clsx","className","CssBaseline","AppBar","Toolbar","IconButton","edge","aria-label","onClick","component","noWrap","Drawer","Divider","List","Container","maxWidth","Grid","item","xs","md","lg","Paper","Box","pt","basicFontFamilty","createMuiTheme","typography","fontFamily","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a6ba732.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Link } from '@material-ui/core';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'이 페이지는'} <Link href=\"https://material-ui.com/\">Material UI</Link>\r\n        {'를 이용해 만들어 졌습니다.'}\r\n        <br />\r\n        {'Copyright © '}GSA Infoteam {new Date().getFullYear()}\r\n        {'.'}\r\n      </Typography>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\n\r\nexport const firstListItems = (\r\n  <div>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <i class=\"material-icons\">info</i>\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"인포팀이란?\" />\r\n    </ListItem>\r\n  </div>\r\n);\r\n\r\nexport const secondListItems = (\r\n  <div>\r\n    <ListSubheader inset>인포팀에서 하는 일</ListSubheader>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <i class=\"material-icons\">developer_board</i>\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"NAS 관리\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <i class=\"material-icons\">public</i>\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Gistory 관리\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <i\r\n          class=\"fab fa-facebook\"\r\n          style={{\r\n            fontSize: '22.5px',\r\n            lineHeight: '1',\r\n            letterSpacing: 'normal',\r\n            textTransform: 'none',\r\n            display: 'inline-block',\r\n            whiteSpace: 'normal',\r\n            direction: 'ltr',\r\n            MozFontFeatureSettings: 'liga',\r\n            alignContent: 'center',\r\n          }}\r\n        ></i>\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"페이스북 커뮤니티\" />\r\n    </ListItem>\r\n  </div>\r\n);\r\n\r\nexport const thirdListItems = (\r\n  <div>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <i class=\"material-icons\">drafts</i>\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"지원하기\" />\r\n    </ListItem>\r\n    <ListItem button>\r\n      <ListItemIcon>\r\n        <i class=\"material-icons\">help_outline</i>\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"문의사항\" />\r\n    </ListItem>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CssBaseline, Toolbar, IconButton } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport List from '@material-ui/core/List';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport Footer from './Footer';\r\nimport { firstListItems, secondListItems, thirdListItems } from './listItems';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\n\r\nconst DashBoard = () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(\r\n              classes.menuButton,\r\n              open && classes.menuButtonHidden,\r\n            )}\r\n          >\r\n            <i className=\"material-icons\">menu</i>\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n            className={classes.title}\r\n          >\r\n            GSA Infoteam\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <i class=\"material-icons\">close</i>\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>{firstListItems}</List>\r\n        <Divider />\r\n        <List>{secondListItems}</List>\r\n        <Divider />\r\n        <List>{thirdListItems}</List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} md={8} lg={9}>\r\n              <Paper className={fixedHeightPaper}></Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={4} lg={3}>\r\n              <Paper className={fixedHeightPaper}></Paper>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}></Paper>\r\n            </Grid>\r\n          </Grid>\r\n          <Box pt={4}>\r\n            <Footer />\r\n          </Box>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashBoard;\r\n","import React from 'react';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport DashBoard from './DashBoard';\r\nimport './App.css';\r\n\r\nconst basicFontFamilty = createMuiTheme({\r\n  typography: {\r\n    fontFamily: ['Noto Sans KR'],\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={basicFontFamilty}>\r\n      <CssBaseline />\r\n      <DashBoard></DashBoard>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}